apply plugin: 'java'
apply plugin: 'application'

mainClassName = "foo.bar.application.App"

repositories {
    mavenCentral()
}

dependencies {
    build project(':frontend')
    compile project(':model')

    //Basic Jetty
    compile group: 'org.eclipse.jetty', name: 'jetty-server', version: '9.4.5.v20170502'
    compile group: 'org.eclipse.jetty', name: 'jetty-servlet', version: '9.4.5.v20170502'

    //Jersey for REST
    compile group: 'org.glassfish.jersey.core', name: 'jersey-server', version: '2.25.1'
    compile group: 'org.glassfish.jersey.containers', name: 'jersey-container-servlet-core', version: '2.25.1'
    compile group: 'org.glassfish.jersey.containers', name: 'jersey-container-jetty-http', version: '2.25.1'

    //Jetty Websocket for Websocket
    compile group: 'org.eclipse.jetty.websocket', name: 'websocket-api', version: '9.4.5.v20170502'
    compile group: 'org.eclipse.jetty.websocket', name: 'websocket-server', version: '9.4.5.v20170502'

    //Manual test WS client
    testCompile group: 'org.eclipse.jetty.websocket', name: 'websocket-client', version: '9.4.5.v20170502'

    //RabbitMQ
    compile 'com.rabbitmq:amqp-client:4.1.0'

    // Redis client
    compile 'redis.clients:jedis:2.9.0'

    // Guava for rate limiting
    compile 'com.google.guava:guava:21.0'

    // collecting metrics
    compile 'io.dropwizard.metrics:metrics-core:3.2.2'
    compile 'io.dropwizard.metrics:metrics-graphite:3.2.2'
    compile 'io.dropwizard.metrics:metrics-jersey2:3.2.2'
}

task(buildDocker, type:Exec, dependsOn: distTar) {
    //on linux
    commandLine "docker", "build", ".", "-t", "192.168.2.136:5000/backend"
    //extension method stopTomcat.output() can be used to obtain the output:
    ext.output = {
        return standardOutput.toString()
    }
}
build.dependsOn buildDocker

task(pushDocker, type:Exec, dependsOn: buildDocker) {
    //on linux
    commandLine "docker", "push", "192.168.2.136:5000/backend"
    //extension method stopTomcat.output() can be used to obtain the output:
    ext.output = {
        return standardOutput.toString()
    }
}